{"version":3,"file":"read-BFEmAszB.js","sources":["../../src/js/api/post/read.js"],"sourcesContent":["import { headers } from \"../headers\";\r\nimport { API_SOCIAL_POSTS } from \"../constants\";\r\n\r\n/**\r\n * Fetches one single post from the API\r\n * @param {string} id - id of the single post\r\n * @returns {Promise} data - a single post\r\n * @example\r\n * ```js\r\n * readPost(\"709\")\r\n * ```\r\n */\r\nexport async function readPost(id) {\r\n  const queryParameters = `?&_author=true&_reactions=true&_comments=true`;\r\n  try {\r\n    const response = await fetch(\r\n      API_SOCIAL_POSTS + \"/\" + id + queryParameters,\r\n      {\r\n        method: \"GET\",\r\n        headers: headers(),\r\n      }\r\n    );\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      const post = data.data;\r\n      return post;\r\n    }\r\n  } catch (error) {\r\n    alert(\"something went wrong trying to fetch the post\");\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches {limit} most recent posts from the API\r\n * @param {number} limit  - limit of posts per page (set to 12 if nothing is send in)\r\n * @param {number} page - chooses with page (set to 1 if nothing is send in)\r\n * @returns {Promise} userPosts - most recent posts\r\n *\r\n * @example\r\n * ```js\r\n * readPosts(12, 1)\r\n * readPosts()\r\n * ```\r\n */\r\nexport async function readPosts(limit = 12, page = 1) {\r\n  const queryParameters = `?limit=${limit}&page=${page}&_author=true&_reactions=true&_comments=true`;\r\n  try {\r\n    const response = await fetch(API_SOCIAL_POSTS + queryParameters, {\r\n      method: \"GET\",\r\n      headers: headers(),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n\r\n      const userPosts = data.data;\r\n\r\n      return userPosts;\r\n    }\r\n  } catch (error) {\r\n    alert(\"something went wrong trying to fetch user posts\");\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches {limit} number of posts from a single user\r\n * @param {string} username - username of the chosen user\r\n * @param {number} limit  - limit of posts per page (set to 12 if nothing is send in)\r\n * @param {number} page - chooses with page (set to 1 if nothing is send in)\r\n * @returns\r\n * @example\r\n * ```js\r\n * readPostsByUser(\"Finn\", 12, 1)\r\n * readPostsByUser(\"Finn\")\r\n * ```\r\n */\r\n\r\nexport async function readPostsByUser(username, limit = 12, page = 1) {\r\n  const queryParameters = `?limit=${limit}&page=${page}&_author=true&_reactions=true&_comments=true`;\r\n  try {\r\n    const response = await fetch(API_SOCIAL_POSTS + queryParameters, {\r\n      method: \"GET\",\r\n      headers: headers(),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n\r\n      const userPosts = data.data;\r\n      const test = userPosts.filter((post) => {\r\n        return post.author.name === username;\r\n      });\r\n\r\n      return test;\r\n    }\r\n  } catch (error) {\r\n    alert(\"something went wrong trying to fetch user posts\");\r\n  }\r\n}\r\n"],"names":["readPost","id","queryParameters","response","API_SOCIAL_POSTS","headers","readPosts","limit","page","readPostsByUser","username","post"],"mappings":"iDAYO,eAAeA,EAASC,EAAI,CACjC,MAAMC,EAAkB,gDACxB,GAAI,CACF,MAAMC,EAAW,MAAM,MACrBC,EAAmB,IAAMH,EAAKC,EAC9B,CACE,OAAQ,MACR,QAASG,EAAS,CACnB,CACP,EAEI,GAAIF,EAAS,GAGX,OAFa,MAAMA,EAAS,QACV,IAGrB,MAAe,CACd,MAAM,+CAA+C,CACtD,CACH,CAcO,eAAeG,EAAUC,EAAQ,GAAIC,EAAO,EAAG,CACpD,MAAMN,EAAkB,UAAUK,CAAK,SAASC,CAAI,+CACpD,GAAI,CACF,MAAML,EAAW,MAAM,MAAMC,EAAmBF,EAAiB,CAC/D,OAAQ,MACR,QAASG,EAAS,CACxB,CAAK,EAED,GAAIF,EAAS,GAKX,OAJa,MAAMA,EAAS,QAEL,IAI1B,MAAe,CACd,MAAM,iDAAiD,CACxD,CACH,CAeO,eAAeM,EAAgBC,EAAUH,EAAQ,GAAIC,EAAO,EAAG,CACpE,MAAMN,EAAkB,UAAUK,CAAK,SAASC,CAAI,+CACpD,GAAI,CACF,MAAML,EAAW,MAAM,MAAMC,EAAmBF,EAAiB,CAC/D,OAAQ,MACR,QAASG,EAAS,CACxB,CAAK,EAED,GAAIF,EAAS,GAQX,OAPa,MAAMA,EAAS,QAEL,KACA,OAAQQ,GACtBA,EAAK,OAAO,OAASD,CAC7B,CAIJ,MAAe,CACd,MAAM,iDAAiD,CACxD,CACH"}